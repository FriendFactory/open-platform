--liquibase formatted sql

--changeset xxd:000001_init_tables
create table if not exists public."GeoCluster"
(
    "Id"                              bigint generated always as identity
        primary key,
    "Priority"                        integer                       not null
        unique,
    "Title"                           text,
    "IsActive"                        boolean default true          not null,
    "IncludeVideoFromCountry"         text[]  default '{*}'::text[] not null,
    "ExcludeVideoFromCountry"         text[]  default '{}'::text[]  not null,
    "IncludeVideoWithLanguage"        text[]  default '{*}'::text[] not null,
    "ExcludeVideoWithLanguage"        text[]  default '{}'::text[]  not null,
    "ShowToUserFromCountry"           text[]  default '{*}'::text[] not null,
    "HideForUserFromCountry"          text[]  default '{}'::text[]  not null,
    "ShowForUserWithLanguage"         text[]  default '{*}'::text[] not null,
    "HideForUserWithLanguage"         text[]  default '{}'::text[]  not null,
    "RecommendationVideosPool"        integer default 3000          not null,
    "RecommendationNumOfDaysLookback" integer default 10            not null
);

create type "TaskType" as enum ('Daily', 'Weekly', 'Season', 'Onboarding', 'Voting');

create table if not exists public."SchoolTask"
(
    "Id"                   bigint generated always as identity
        primary key,
    "Name"                 text                                                 not null,
    "XpPayout"             integer                                              not null,
    "SoftCurrencyPayout"   integer                                              not null,
    "Description"          text,
    "FilesInfo"            json                                                 not null,
    "SortOrder"            integer                  default 0,
    "CreatedTime"          timestamp with time zone default CURRENT_TIMESTAMP   not null,
    "ModifiedTime"         timestamp with time zone default CURRENT_TIMESTAMP   not null,
    "Tags"                 bigint[]                 default ARRAY []::integer[] not null,
    "CharacterCount"       integer                                              not null,
    "BonusXp"              integer                                              not null,
    "BonusSoftCurrency"    integer                                              not null,
    "IsDressed"            boolean                  default false               not null,
    "DeletionAllowed"      boolean                  default false               not null,
    "TotalTime"            integer,
    "ReadinessId"          bigint                   default 1                   not null,
    "BonusTagId"           bigint,
    "Deadline"             timestamp with time zone default CURRENT_TIMESTAMP   not null,
    "PublishingTime"       timestamp with time zone default CURRENT_TIMESTAMP   not null,
    "LevelId"              bigint,
    "EventSequenceNumbers" bigint[]                 default ARRAY []::integer[] not null,
    "TaskType"             "TaskType"               default 'Daily'::"TaskType" not null,
    "EditorSettingsId"     bigint                                               not null,
    "TemplateId"           bigint,
    "PagesNavigationId"    bigint                                               not null,
    "CharacterReplacement" json,
    constraint "LevelId_or_TemplateId_not_null"
        check (("LevelId" IS NOT NULL) OR ("TemplateId" IS NOT NULL))
);

create table public."CrewMember"
(
    "Id"         bigint generated always as identity
        primary key,
    "CrewId"     bigint                              not null,
    "GroupId"    bigint                              not null,
    "CrewRoleId" bigint                              not null,
    "JoinedAt"   timestamp default CURRENT_TIMESTAMP not null,
    "RemovedAt"  timestamp
);

create table public."Group"
(
    "Id"                bigint generated by default as identity
        primary key,
    "Name"              text                  not null,
    "IsBlocked"         boolean default false not null,
    "DeletedAt"         date,
    "TaxationCountryId" bigint,
    "DefaultLanguageId" bigint  default 2
);

create table public."UserAndGroup"
(
    "UserId"  bigint not null,
    "GroupId" bigint not null,
    constraint "pk_UserAndGroup"
        primary key ("UserId", "GroupId")
);

create table public."BlockedUser"
(
    "BlockedUserId"   bigint not null,
    "BlockedByUserId" bigint not null,
    constraint "pk_BlockedUser"
        primary key ("BlockedUserId", "BlockedByUserId")
);

create table public."Country"
(
    "Id"      bigint generated always as identity
        primary key,
    "ISOName" text not null
        unique
);

create table public."Language"
(
    "Id"      bigint generated always as identity
        primary key,
    "IsoCode" text not null
);

create table public."Likes"
(
    "VideoId" bigint                                             not null,
    "UserId"  bigint                                             not null,
    "Time"    timestamp with time zone default CURRENT_TIMESTAMP not null
);

create table public."User"
(
    "Id"          bigint generated always as identity
        primary key,
    "MainGroupId" bigint not null
);

create type public."VideoAccess" as enum ('Public', 'ForFriends', 'ForFollowers', 'Private', 'ForTaggedGroups');

CREATE EXTENSION if not exists postgis;
CREATE EXTENSION if not exists postgis_raster;
CREATE EXTENSION if not exists fuzzystrmatch;
CREATE EXTENSION if not exists postgis_tiger_geocoder;
CREATE EXTENSION if not exists postgis_topology;
CREATE EXTENSION if not exists address_standardizer_data_us;

create table public."Video"
(
    "Id"                  bigint generated always as identity
        primary key,
    "LevelId"             bigint,
    "GroupId"             bigint                                             not null,
    "CreatedTime"         timestamp with time zone default CURRENT_TIMESTAMP not null,
    "RemixedFromVideoId"  bigint,
    "IsDeleted"           boolean                  default false             not null,
    "Access"              "VideoAccess"                                      not null,
    "StartListItem"       integer,
    "Language"            text                     default 'swe'::text       not null,
    "Country"             text                     default 'swe'::text       not null,
    "ExternalSongIds"     bigint[]                 default '{}'::bigint[]    not null,
    "SongInfo"            text                     default '[]'::json        not null,
    "UserSoundInfo"       text                     default '[]'::text        not null,
    "SchoolTaskId"        bigint,
    "PublishTypeId"       bigint                   default 1                 not null,
    "GeneratedTemplateId" bigint,
    "TemplateIds"         bigint[]                 default ARRAY []::bigint[],
    "Location"            geography(Point, 4326)
);

create table public."Views"
(
    "VideoId" bigint                                             not null,
    "UserId"  bigint                                             not null,
    "Time"    timestamp with time zone default CURRENT_TIMESTAMP not null,
    created   timestamp with time zone default now()             not null
);

create table public."VideoReport"
(
    "Id"               bigint generated always as identity,
    "VideoId"          bigint                                             not null,
    "CreatedTime"      timestamp with time zone default CURRENT_TIMESTAMP not null,
    "ClosedTime"       timestamp with time zone,
    "Message"          text                                               not null,
    "ReasonId"         bigint                                             not null,
    "ReporterGroupId"  bigint                                             not null,
    "AssignedToUserId" bigint,
    "ClosedByUserId"   bigint,
    "ModerationNotes"  text,
    "HideVideo"        boolean                  default true              not null
);

create table public."Follower"
(
    "FollowingId" bigint                                             not null,
    "FollowerId"  bigint                                             not null,
    "Time"        timestamp with time zone default CURRENT_TIMESTAMP not null,
    "IsMutual"    boolean                  default false,
    constraint "pk_Follower"
        primary key ("FollowerId", "FollowingId")
);

create table public."Template"
(
    "Id"                   bigint generated always as identity primary key,
    "TrendingSortingOrder" bigint,
    "CharacterCount"       integer               not null,
    "IsDeleted"            boolean default false not null,
    "ReadinessId"          bigint  default 1     not null
);

create schema if not exists stats;

create table if not exists stats.follow_edge
(
    source                         bigint  not null,
    destination                    bigint  not null,
    is_mutual                      boolean not null default false,
    source_is_minor                boolean not null default false,
    source_strict_coppa_rules      boolean          default false,
    destination_is_minor           boolean not null default false,
    destination_strict_coppa_rules boolean          default false,
    primary key (source, destination)
);

create table if not exists stats.template_ranking
(
    template_id bigint not null,
    rank        bigint not null,
    primary key (template_id)
);

create table if not exists stats.template_data
(
    id                bigint not null,
    is_deleted        bool   not null,
    original_video_id bigint,
    readiness_id      bigint not null,
    primary key (id)
);

create table if not exists stats.influential_nodes
(
    destination bigint not null,
    rank        bigint not null,
    primary key (destination)
);

create table if not exists stats.user_extra_info
(
    group_id   bigint                   not null,
    last_login timestamp with time zone not null default now(),
    primary key (group_id)
);

create table if not exists "CharacterControllerBodyAnimation"
(
    "Id"                     bigint generated always as identity primary key,
    "CharacterControllerId"  bigint NOT NULL,
    "PrimaryBodyAnimationId" bigint NOT NULL,
    "LowerBodyAnimationId"   bigint
);

create table if not exists "CharacterController"
(
    "Id"      bigint generated always as identity primary key,
    "EventId" bigint NOT NULL
);

create table if not exists "Event"
(
    "Id"      bigint generated always as identity primary key,
    "GroupId" bigint NOT NULL,
    "LevelId" bigint NOT NULL
);

create table if not exists "Level"
(
    "Id"      bigint generated always as identity primary key,
    "GroupId" bigint NOT NULL
);
